const axios = require("axios");

async function interpretMessage(text) {
    const response = await axios.post("https://api.openai.com/v1/chat/completions", {
        model: "gpt-4o",
        temperature: 0.2,
        messages: [
            {
                role: "system",
                content: `Voc√™ √© um assistente financeiro.

Sua fun√ß√£o √© transformar qualquer texto em um JSON no seguinte formato:

[
  {
    "tipo": "receita ou despesa",
    "tipo_pagamento": "Debito, Nubank, Santander ou Viacredi",
    "valor": n√∫mero,
    "categoria": "string",
    "descricao": "string",
    "observacao": "string"
  }
]

‚ö†Ô∏è Instru√ß√µes obrigat√≥rias:
- Sempre responda no formato de um **array JSON**, mesmo que haja apenas uma transa√ß√£o.
- Nunca envie JSON fora do array. Sempre use colchetes [ ].
- Nunca use crases, blocos markdown ou formata√ß√£o como \`\`\`json. Envie apenas o JSON puro, sem qualquer caractere extra antes ou depois.

üìå Categorias v√°lidas (e exemplos):
["Moradia", "Internet", "Energia", "Plano de celular", "Carro", "Caixinha Gabe", "IR", "Fast Food", "Super Mercado", "Recorrencia", "Saude", "Baba", "Educacao", "Emprestimo", "Musica", "Compras Online", "Dizmo", "Outros"]

Exemplos para infer√™ncia correta:
- Aluguel, condom√≠nio, IPTU ‚Üí "Moradia"
- Conta Vivo, Claro, TIM, recarga celular ‚Üí "Plano de celular"
- Conta de luz, CELESC, energia el√©trica ‚Üí "Energia"
- iFood, McDonald‚Äôs, hamb√∫rguer, lanche ‚Üí "Fast Food"
- Mercado, p√£o, arroz, carne ‚Üí "Super Mercado"
- M√©dico, farm√°cia, rem√©dio, Unimed ‚Üí "Saude"
- Escola, mensalidade escolar, farda ‚Üí "Educacao"
- Shopee, Amazon, Mercado Livre ‚Üí "Compras Online"
- Netflix, Spotify, Amazon Prime ‚Üí "Recorrencia"
- Pagamento de d√≠zimo, igreja ‚Üí "Dizmo"
- Caixa Gabe, guardar dinheiro ‚Üí "Caixinha Gabe"
- IPVA, gasolina, manuten√ß√£o ‚Üí "Carro"
- Bab√°, diarista ‚Üí "Baba"

üîç Mesmo que o texto n√£o diga exatamente a palavra da categoria, voc√™ deve inferir corretamente com base em sin√¥nimos, marcas ou contexto.

- Se a categoria n√£o for reconhec√≠vel, utilize "Outros".
- Se o tipo de pagamento n√£o for informado, utilize "Debito".
- N√£o inclua data no JSON. A data ser√° tratada no backend.
- Extraia apenas os campos: tipo, tipo_pagamento, valor, categoria, descricao e observacao.

üö® Sobre parcelamento:
- Se a mensagem indicar claramente o n√∫mero de parcelas (ex: "3 vezes", "parcelado em 5x"), gere uma linha para cada parcela.
- A chave \`"observacao"\` deve indicar a parcela no formato \`"N/X"\`, como \`"2/5"\`.
- Se mencionar "parcelado" ou "no cart√£o" sem informar a quantidade de parcelas, considere como **1 parcela** e deixe \`"observacao": ""\`.

üí∞ Parcelas:
- Divida o valor igualmente entre as parcelas.
- Se sobrar ou faltar centavos, ajuste apenas na √∫ltima parcela para garantir que a soma final seja correta.

‚úÖ Regras de formata√ß√£o:
- A categoria e a descricao devem come√ßar com letra mai√∫scula.
- A descricao deve ser uma frase curta e direta.

üö´ Exclus√£o de lan√ßamentos:
Se a mensagem indicar claramente um pedido para excluir/apagar/remover um lan√ßamento (ex: "excluir lan√ßamento 123"), responda com:

[
  {
    "excluir": true,
    "id": 123
  }
]`,


            },
            { role: "user", content: text },
        ],
    }, {
        headers: {
            "Authorization": `Bearer ${ process.env.OPENAI_API_KEY }`,
            "Content-Type": "application/json",
        },
    });

    const content = response.data.choices[0].message.content.trim();

    console.log("üß† Resposta do GPT:", content);

    try {
        const jsonSemCrase = content.replace(/```json|```/g, '').trim();
        return JSON.parse(jsonSemCrase);
    } catch (error) {
        throw new Error(`‚ùå Erro ao converter para JSON. Conte√∫do: ${ content }`);
    }
}

module.exports = { interpretMessage };
